@page
@using CaveroClubhuis.Areas.Identity.Data
@using Syncfusion.EJ2.Buttons
@using Syncfusion.EJ2.Grids
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CaveroClubhuis.Pages.IndexModel
@inject SignInManager<CaveroUser> SignInManager
@inject UserManager<CaveroUser> UserManager
@{
    ViewData["Title"] = "Welkom";
    var minDate= new DateTime(2023,1,1, 12,00,00);
}
<!--dit zorgt voor de kleuren waarin je randomized-->
@{
    var colors = new[] { "#CFE1FF", "#FFDCDC", "#98FB98", "#FFD700", "#87CEFA", "#FFA07A", "#DDA0DD", "#00FA9A", "#FF6347", "#40E0D0" };
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/3.5.0/remixicon.css" />
    <link rel="stylesheet" href="~/css/index.css"/>
    <link rel="stylesheet" href="/npm/flatpickr/dist/flatpickr.min.css"/>
</head>

<div class="text-center">    
    <div id='container1'>
        <div style="width: 300px; height: 75px; padding-left: 25px; padding-right: 25px; padding-top: 16px; padding-bottom: 16px; background: #803689; border-radius: 20px; justify-content: flex-start; align-items: center; gap: 12px; display: inline-flex">
            <div style="width: 27px; height: 25px; position: relative">
                <i class="ri-group-fill" style="color: white; font-size: 25px; position: absolute; left: 0; top: -7px;"></i>
            </div>

            <div style="flex-direction: column; justify-content: center; align-items: center; gap: 9px; display: inline-flex">
                <div style="text-align: center; color: white; font-size: 18px; font-family: Arial; font-weight: 400; line-height: 20px; letter-spacing: 0.50px; word-wrap: break-word">@Model.PeopleCount</div>
            </div>
            <div style="width: 2px; height: 40px; background-color: white; margin: 1px;"></div> <!-- White divider -->
            <div style="display: inline-flex; gap: 8px; white-space: nowrap;">
                <ejs-button id="targetButton" content="Caverianen in de loods" cssClass="custom-button"></ejs-button>
            </div>
                <div id='container' style="height:350px;">
                <ejs-dialog id='dialog' header="Caverianen in de loods"  target="#container" showCloseIcon="true" visible="false" cssClass="peopleOverview" >
                    <e-content-template>
                  
                        <ejs-grid id="Grid" dataSource="@Model.People" cssClass="peopleGrid" allowPaging="true">
                            <e-grid-pagesettings pageSize="6" ></e-grid-pagesettings>
                            <e-grid-columns>
                                <e-grid-column field="FirstName" headerText="Voornaam" textAlign="Center" width="40"></e-grid-column>
                                <e-grid-column field="LastName" headerText="Achternaam" textAlign="Center" width="40"></e-grid-column>
                                <e-grid-column field="Team" headerText="Team" textAlign="Center" width="40"></e-grid-column>
                            </e-grid-columns>
                        </ejs-grid>
                    </e-content-template>
                </ejs-dialog>
                </div>
            
            

        </div>
    </div>
    <div class="upcomming">
        <div class="Wrapper">
            <div class="Evenementen">
                <div class="StickyHeader">
                    <h2 class="Title">Opkomend</h2>
                    <hr class="titleLine" />
                </div>
                @foreach (var eventItem in Model.EventsList)
{
                var randomIndex = new Random().Next(0, colors.Length);
                var randomColor = colors[randomIndex];

                <div class="kaart" style="background-color: @randomColor;">
                    <h2>@eventItem.Title</h2>
                    <h3>@eventItem.Date.ToString("dd-MM-yy"), @eventItem.StartTime.ToString(@"hh\:mm")</h3>
                    <span class="Hover">
                        <p id="beschijving">
                            @eventItem.Description
                        </p>
                    </span>
                </div>
}
            </div>
        </div>
    </div>
    
    <div class="check-inWidget">
        <p>Setup Recurring check-in</p>
        <div class="line"></div>
        Select a start and end date for the recurring check-in:
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="error-message">
                @TempData["ErrorMessage"]
            </div>
        }
        <form method="post" asp-page-handler="RecurringCheck">
            <input type="text" id="startDatePicker" class="flatpickr" name="StartDate" placeholder="Please Select Start Date">
            <input type="text" id="endDatePicker" class="flatpickr" name="EndDate" placeholder="Please Select End Date">
            <button type="submit" class="check-in">
                <i class="ri-login-circle-line"></i>
                Check - in
            </button>
        </form>
    </div>
    
    
    <script>
     window.onresize = function () {
      // Ensure the dialog is repositioned when the window is resized
     dialog.refreshPosition();
     }
     </script>
    
    <script src="/npm/flatpickr/dist/flatpickr.js"></script>
    
    <script>
                window.onload = function () {
                    var dialog = document.getElementById("dialog").ej2_instances[0];
    
                    document.getElementById('targetButton').onclick = function () {
                        dialog.target = '#targetButton';
                        dialog.position = { X: 'center', Y: 'top' };
                        dialog.show();
                    };
    
                    window.onresize = function () {
                        dialog.refreshPosition();
                    };
    
                    // Initialize the start date picker
                    flatpickr("#startDatePicker", {
                        enableTime: true,
                        dateFormat: "d-m-Y H:i",
                        minDate: new Date(@Model.MinDate.Year, @Model.MinDate.Month - 1, @Model.MinDate.Day, @Model.MinDate.Hour, @Model.MinDate.Minute),
                        disable: [
                            function(date) {
                                return (date.getDay() === 0 || date.getDay() === 6);
                            }
                        ],
                        onRenderCell: onRenderCell
                    });
    
                    // Initialize the end date picker
                    flatpickr("#endDatePicker", {
                        enableTime: true,
                        dateFormat: "d-m-Y H:i",
                        minDate: new Date(@Model.MinDate.Year, @Model.MinDate.Month - 1, @Model.MinDate.Day, @Model.MinDate.Hour, @Model.MinDate.Minute),
                        disable: [
                            function(date) {
                                return (date.getDay() === 0 || date.getDay() === 6);
                            }
                        ],
                        onRenderCell: onRenderCell
                    });
                };
    
                function onRenderCell(args) {
                    if (args.date.getDay() == 0 || args.date.getDay() == 6) {
                        args.isDisabled = true;
                    }
                }
            </script>
    
</div>